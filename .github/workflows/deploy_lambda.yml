name: Deploy Terraform
on:
  workflow_call:
    inputs:
      environment: # development | release | production
        required: true
        type: string

    secrets:
      GIT_CREDENTIALS:
        required: true
      NPM_AUTH_TOKEN:
        required: true
      AWS_OPS_BUCKET:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_ROLE:
        required: true
      PRIVATE_KEY:
        required: true

jobs:
  changes:
    name: 'Check Changes'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 5

      - uses: marceloprado/has-changed-path@v1
        id: terraform_changed
        with:
          paths: terraform

      - uses: marceloprado/has-changed-path@v1
        id: code_changed
        with:
          paths: api consumers shared/common shared/config

      - run: echo Has any TF code been updated? - ${{ steps.terraform_changed.outputs.changed }}

      - run: echo Has any code been updated? - ${{ steps.code_changed.outputs.changed }}

    outputs:
      terraform_changed: ${{ steps.terraform_changed.outputs.changed }}
      code_changed: ${{ steps.code_changed.outputs.changed }}

  terraform:
    name: Terraform
    needs: [changes]
    if: ${{ needs.changes.outputs.terraform_changed == 'true'}}
    runs-on: ubuntu-latest
    env:
      tf_actions_working_dir: ./terraform
      GITHUB_TOKEN: ${{ secrets.GIT_CREDENTIALS }}
      NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
      AWS_OPS_BUCKET: ${{ secrets.AWS_OPS_BUCKET }}
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref_name }}

      - uses: hashicorp/setup-terraform@v1

      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: modules-${{ hashFiles('./yarn.lock') }}

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-duration-seconds: 1200
          role-session-name: ${{ inputs.environment }}

      - name: Setup SSH Keys and known_hosts
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          SSH_PATH="$HOME/.ssh"
          mkdir -p "$SSH_PATH"
          touch "$SSH_PATH/known_hosts"
          echo "$PRIVATE_KEY" > "$SSH_PATH/id_rsa"
          chmod 700 "$SSH_PATH"
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          chmod 600 "$SSH_PATH/known_hosts"
          chmod 600 "$SSH_PATH/id_rsa"
          eval $(ssh-agent)
          ssh-add "$SSH_PATH/id_rsa"

      - name: Set Short Env
        run: |
          case development in
            development) echo "short_env=dev" $GITHUB_ENV;;
            release) echo "short_env=release" >> $GITHUB_ENV;;
            production) echo "short_env=prod" $GITHUB_ENV;;
          esac

      - run: lerna bootstrap

      - name: Get packages environment variables
        run: lerna run pull-env:${{ env.short_env }}
        continue-on-error: true
        
      - name: Get shared environment variables
        run: yarn pull-shared-env:${{ env.short_env }}
        continue-on-error: true

      - run: terraform init

      - run: terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }}

      - run: terraform apply --auto-approve

  deploy:
    name: 'Functions'
    needs: [changes, terraform]
    if: ${{ needs.changes.outputs.code_changed == 'true'}}
    timeout-minutes: 5
    runs-on: ubuntu-latest
    env:
      NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
      AWS_OPS_BUCKET: ${{ secrets.AWS_OPS_BUCKET }}

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 5

      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: modules-${{ hashFiles('./yarn.lock') }}

      - name: Generate and publish release
        if: ${{ inputs.environment }} == 'production'
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          publish: true

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-duration-seconds: 1200
          role-session-name: ${{ inputs.environment }}

      - name: Set Short Env
        run: |
          case development in
            development) echo "short_env=dev" $GITHUB_ENV;;
            release) echo "short_env=release" >> $GITHUB_ENV;;
            production) echo "short_env=prod" $GITHUB_ENV;;
          esac

      - run: lerna bootstrap
      
      - name: Build common packages
        run: lerna run build:common

      - name: Build modified packages
        run: lerna run build --since origin/${{ github.ref_name }}~1 --exclude-dependents

      - name: Deploy modified packages
        run: lerna run deploy:${{ env.short_env }} --since origin/${{ github.ref_name }}~1 --exclude-dependents
