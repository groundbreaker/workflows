name: Deploy UI
on:
  workflow_call:
    inputs:
      environment: # development | release | production
        required: true
        type: string
      portal: # investor | manager
        required: true
        type: string
      cf_path: # Cloudfront Path. i.e: v2/home | v2/settings | etc...
        required: true
        type: string
      distribution_id:
        required: true
        type: string

    secrets:
      NPM_AUTH_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_ROLE:
        required: true

env:
  GROUNDBREAKER_ENVIRONMENT: ${{ inputs.environment }}
  NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

jobs:
  deploy:
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Generate and publish release
        uses: release-drafter/release-drafter@v5
        if: inputs.environment == 'production'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          publish: true

      - uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Install Dependencies
        run: npm ci --no-optional

      - name: Configure AWS Tools Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Pull environment variables
        run: npm run pull-env:ci

      - name: Build App
        run: npm run build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-duration-seconds: 1200
          role-session-name: ${{ inputs.environment }}

      - name: Set s3 bucket on env
        run: |
          case ${{ inputs.environment }} in
            development) echo "s3_full_path=dev.gbrkr.com/${{ inputs.portal }}/${{ inputs.cf_path }}"  >> $GITHUB_ENV ;;
            release) echo "s3_full_path=dev.gbrkr.com/${{ inputs.portal }}/${{ inputs.cf_path }}"  >> $GITHUB_ENV ;;
            production) echo "s3_full_path=gb-ui-v2/${{ inputs.portal }}/${{ inputs.cf_path }}"  >> $GITHUB_ENV ;;
            *) echo "Invalid environment" && exit 1 ;;
          esac

      - name: Deploy
        run: |
          aws s3 rm --recursive s3://${{ env.s3_full_path }}
          aws s3 sync dist s3://${{ env.s3_full_path }}

      - name: Add index cache invalidation metadata
        run: |
          aws s3 cp s3://${{ env.s3_full_path }}/index.html s3://${{ env.s3_full_path }}/index.html \
            --metadata-directive REPLACE \
            --cache-control max-age=0 \
            --content-type "text/html"

      - name: Invalidate cache
        run: aws cloudfront create-invalidation --distribution-id ${{ inputs.distribution_id }} --paths "/${{ inputs.cf_path }}/*"
